{"ast":null,"code":"var _jsxFileName = \"/Users/jinxin/GitHubRepo/graphql-play/client/src/components/BookDetails.js\";\nimport React from 'react';\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport { getBookQuery } from \"../queries/queries\";\n\nconst BookDetails = props => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(getBookQuery({\n    options: props => {\n      return {\n        variables: {\n          id: props.bookId\n        }\n      };\n    }\n  }));\n\n  const displayBookDetails = () => {\n    const {\n      book\n    } = data;\n\n    if (book) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, book.name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, book.genre), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, book.author.name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"All books by this author:\"), React.createElement(\"ul\", {\n        className: \"other-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, book.author.books.map(item => {\n        return React.createElement(\"li\", {\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, item.name);\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"No book selected...\");\n    }\n  };\n\n  return React.createElement(\"div\", {\n    id: \"book-details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, displayBookDetails());\n};\n\nexport default BookDetails;","map":{"version":3,"sources":["/Users/jinxin/GitHubRepo/graphql-play/client/src/components/BookDetails.js"],"names":["React","useQuery","useLazyQuery","getBookQuery","BookDetails","props","loading","error","data","options","variables","id","bookId","displayBookDetails","book","name","genre","author","books","map","item"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,qBAAvC;AACA,SAASC,YAAT,QAA6B,oBAA7B;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CACvCE,YAAY,CAAC;AACXM,IAAAA,OAAO,EAAEJ,KAAK,IAAI;AAChB,aAAO;AACLK,QAAAA,SAAS,EAAE;AACTC,UAAAA,EAAE,EAAEN,KAAK,CAACO;AADD;AADN,OAAP;AAKD;AAPU,GAAD,CAD2B,CAAzC;;AAWA,QAAMC,kBAAkB,GAAG,MAAM;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAWN,IAAjB;;AACA,QAAIM,IAAJ,EAAU;AACR,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,IAAI,CAACC,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAID,IAAI,CAACE,KAAT,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIF,IAAI,CAACG,MAAL,CAAYF,IAAhB,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAJF,EAKE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsBC,IAAI,IAAI;AAC7B,eAAO;AAAI,UAAA,GAAG,EAAEA,IAAI,CAACT,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmBS,IAAI,CAACL,IAAxB,CAAP;AACD,OAFA,CADH,CALF,CADF;AAaD,KAdD,MAcO;AACL,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;AACF,GAnBD;;AAoBA,SAAO;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBF,kBAAkB,EAA1C,CAAP;AACD,CAjCD;;AAmCA,eAAeT,WAAf","sourcesContent":["import React from 'react';\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport { getBookQuery } from \"../queries/queries\";\n\nconst BookDetails = props => {\n  const { loading, error, data } = useQuery(\n    getBookQuery({\n      options: props => {\n        return {\n          variables: {\n            id: props.bookId\n          }\n        };\n      }\n    })\n  );\n  const displayBookDetails = () => {\n    const { book } = data;\n    if (book) {\n      return (\n        <div>\n          <h2>{book.name}</h2>\n          <p>{book.genre}</p>\n          <p>{book.author.name}</p>\n          <p>All books by this author:</p>\n          <ul className=\"other-books\">\n            {book.author.books.map(item => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return <div>No book selected...</div>;\n    }\n  };\n  return <div id=\"book-details\">{displayBookDetails()}</div>;\n};\n\nexport default BookDetails;"]},"metadata":{},"sourceType":"module"}